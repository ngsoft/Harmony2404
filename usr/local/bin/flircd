#!/bin/bash -l
# Detects if flirc device is connected

[[ $(pgrep -c flircd) -gt 1 ]] && exit 0
[ "$(id -u)" != "0" ] && exit 126

# Get CWD
APP_NAME="flircd"
APP_DESC="FLIRC Manager"
FLIRC_BIN="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
FLIRC_ROOT="$(dirname "$FLIRC_BIN")"
FLIRC_PREFIX="$(dirname "$(dirname "$FLIRC_ROOT")")"
FLIRC_LIB="$FLIRC_ROOT/lib/$APP_NAME"
FLIRC_CFG="$FLIRC_PREFIX/etc/$APP_NAME"
FLIRC_RUN="/var/run"
FLIRC_PIDFILE="$FLIRC_RUN/${APP_NAME}.pid"
export LOGFILE="/var/log/${APP_NAME}.log"
INPUTLIRC_CFG_FILE="$FLIRC_CFG/inputlirc.conf"
FLIRC_CFG_FILE="${FLIRC_CFG}/flirc.conf"

# Trap Events
FLIRC_EVENT_XINPUT_ENABLE=SIGUSR1
FLIRC_EVENT_XINPUT_DISABLE=SIGUSR2
# FLIRC_EVENT_ACTIVITY_CHANGE=SIGRTMIN

if [ -d "$FLIRC_LIB" ]; then
    INCLUDE_PATH="$FLIRC_LIB"
fi

# Loads bash-framework
[ -e "$FLIRC_ROOT/lib/bash-framework/bash-framework" ] || throw "bash-framework location not found."
source "$FLIRC_ROOT/lib/bash-framework/bash-framework"

# app usage
function do.usage() {
    echo $APP_DESC
    echo "usage: ${APP_NAME} [...options]"
    echo "  -v  --verbose  be verbose"
    echo "  -d  --daemon   force systemd detection"
    echo "  -h  --help     this help"
    exit 0
}

# Systemd Log override
function.copy log _log

# < https://blog.selectel.com/managing-logging-systemd/ >
# loglevels
#   0 — Emergency: system is unusable
#   1 — Alert: action must be taken immediately
#   2 — Critical: critical conditions
#   3 — Error: error conditions
#   4 — Warning: warning conditions
#   5 — Notice: normal but significant condition
#   6 — Informational: informational messages
#   7 — Debug: debug-level messages

function log() {
    local message="$@"
    if [ "$FLIRC_SYSTEMD" == "1" ]; then echo "<7> $message"; fi
    _log $message
}

function throw() {
    if [ -n "$1" ]; then
        log "ERR: $@"
        if [ "$FLIRC_SYSTEMD" != "1" ]; then echo "$@" >&2; fi
    fi
    exit $COMMAND_CANNOT_EXECUTE
}

# parse cmd line arguments
if VALID_ARGS=$(getopt -o vdh --long verbose,daemon,help -- "$@" 2>/dev/null); then
    eval set -- "$VALID_ARGS"
    while [ : ]; do
        case "$1" in
        -v | --verbose)
            shift
            LOGVERBOSE=true
            ;;
        -d | --daemon)
            shift
            export FLIRC_SYSTEMD=1
            ;;
        -h | --help)
            shift
            do.usage
            ;;
        --)
            shift
            break
            ;;
        esac
    done

else do.usage; fi

export PATH=$PATH:$FLIRC_BIN

require daemon flirc desktop mkservice

# InputLirc Daemon management
new Daemon InputLirc inputlircd
# WebSocket Daemon management
new Daemon FlircWS flircws

# Load InputLirc Config
[ -f "$INPUTLIRC_CFG_FILE" ] || throw "${INPUTLIRC_CFG_FILE} does not exists."
source "$INPUTLIRC_CFG_FILE"
InputLirc[options]="-r $repeat -m $minimum_keycode -t $keymap_translations -n $device_name -x $remote_name -d $socket $extra"
InputLirc[socket]="$socket"
FlircWS[options]="--socket $socket --delay $repeat --remote $remote_name --port 9030"
FlircWS[logs]="/var/log/flircws.log"
unset -v repeat minimum_keycode keymap_translations device_name socket remote_name extra

# Start wait for inputlircd to be loaded
InputLirc.start() {
    local _pid socket="${InputLirc[socket]}"
    InputLirc.running && return $COMMAND_SUCCESS
    log "INFO: Starting InputLIRC"
    @ "${FLIRC_ROOT}/bin/${InputLirc[process]}" ${InputLirc[options]}
    if InputLirc.wait; then
        _pid="$(InputLirc.pid)"
        if [ "$_pid" != "" ]; then
            log "INFO: InputLIRC start success pid: $_pid"
            if [ "$socket" != "" ]; then
                log "INFO: Setting permissions root:sudo on $socket"
                @ chown root:sudo "$socket"
            fi
            return $COMMAND_SUCCESS
        fi
    fi
    log "ERR: InputLIRC start failure"
    return $COMMAND_FAILURE
}

# Start wait for FlircWS
FlircWS.start() {
    local _pid opts="${FlircWS[options]}" logs="${FlircWS[logs]}" proc="${FlircWS[process]}"
    FlircWS.running && return $COMMAND_SUCCESS
    log "INFO: Starting Flirc WebSocket"
    # change cwd to find config files (systemd executes on /)
    @ pushd "${FLIRC_ROOT}/bin"
    ${FLIRC_ROOT}/bin/$proc $opts &>>$logs &
    @ popd
    if FlircWS.wait; then
        _pid="$(FlircWS.pid)"
        if [ -n "$_pid" ]; then
            log "INFO: Flirc WebSocket start success pid: $_pid"
            return $COMMAND_SUCCESS
        fi
    fi
    log "ERR: Flirc WebSocket start failure"
    return $COMMAND_FAILURE
}

# Traps
function cleanup() {

    if FlircWS.running; then
        log "INFO: stopping Flirc WebSocket pid: $(FlircWS.pid)"
        FlircWS.kill
    fi

    if InputLirc.running; then
        log "INFO: stopping InputLIRC pid: $(InputLirc.pid)"
        InputLirc.kill
        log "INFO: stopping flirc capture"
        flirc.capture false
    fi

    @ rm -rf "$FLIRC_PIDFILE"
}

function enable_input() {
    flirc.capture off
}

function disable_input() {
    flirc.capture on
}

function do.kill() {
    exit $COMMAND_SUCCESS
}

function do.exit() {
    cleanup
    log "INFO: Stopping ${APP_NAME}"
    return $COMMAND_SUCCESS
}

trap enable_input $FLIRC_EVENT_XINPUT_ENABLE
trap disable_input $FLIRC_EVENT_XINPUT_DISABLE
trap do.exit EXIT
trap do.kill SIGINT SIGTERM SIGQUIT

function do.main() {
    # Runtime Variables
    local flirc_load_config canloop loop interval timeout canstart logged capture
    flirc_load_config=0
    canloop=1
    loop=0
    interval=.2
    timeout=25
    firstloop=1
    logged=0
    capture=0

    # Start loop
    log "INFO: Starting ${APP_NAME}"

    while [[ $canloop == 1 ]]; do
        if [[ $loop == $timeout ]] || [[ $firstloop == 1 ]]; then
            FlircWS.start
            if ! flirc.connected && [ "$(flirc.status)" == "bootloader" ]; then
                log "INFO: Flirc device on bootloader, fixing dfu"
                flirc.dfu
                flirc_load_config=1
            fi
            if flirc.connected; then
                if [[ $flirc_load_config == 1 ]]; then
                    flirc_load_config=0
                    log "INFO: loading flirc config $FLIRC_CFG_FILE"
                    source "$FLIRC_CFG_FILE"
                fi
                if [[ $logged == 1 ]] || [[ $firstloop == 1 ]]; then
                    log "INFO: Flirc device is connected"
                    logged=0
                fi
                if InputLirc.start; then
                    if [[ $capture == 0 ]]; then
                        if flirc.capture; then
                            capture=1
                        fi
                    fi
                fi
            else
                if [[ $logged == 0 ]]; then
                    log "INFO: Flirc device is disconnected"
                    logged=1
                fi
                if InputLirc.running; then
                    log "INFO: stopping InputLIRC pid: $(InputLirc.pid)"
                    InputLirc.kill
                fi
                # no need to disable capture there as device id does not exists anymore
                capture=0
            fi
            firstloop=0
            loop=0
            continue
        fi
        sleep $interval
        ((loop += 1))
    done

}

# Cleaning up last instance
cleanup

# Set pidfile
echo $BASHPID >"$FLIRC_PIDFILE"

do.main
